{
	"Angular Feature Module ngrx": {
		"prefix": "ng-module-feature",
		"description": "Angular feature module with store",
		"body": [
			"import { NgModule } from '@angular/core';",
			"import { CommonModule } from '@angular/common';",
			"import { Routes, RouterModule } from '@angular/router';",
			"",
			"import { StoreModule } from '@ngrx/store';",
			"import { EffectsModule } from '@ngrx/effects';",
			"",
			"import { reducers, effects } from './store';",
			"",
			"import { services } from './services';",
			"import { guards } from './guards';",
			"import { containers, ${Class}Component } from './containers';",
			"import { components } from './components';",
			"",
			"const routes: Routes = [",
			"\t\t{",
			"\t\tpath: '',",
			"\t\t\tcomponent: ${Class}Component,",
			"\t},",
			"];",
			"",
			"@NgModule({",
			"imports: [",
			"\t\tCommonModule,",
			"\t\tRouterModule.forChild(routes),",
			"\t\tStoreModule.forFeature('$2', reducers),",
			"\t\tEffectsModule.forFeature(effects),",
			"],",
			"\texports: [],",
			"\tdeclarations: [...containers, ...components],",
			"\tproviders: [...services, ...guards],",
			"})",
			"export class ${Class}Module {}",
		]
	},
	"Angular Container Inline": {
		"prefix": "ng-container-inline",
		"description": "Container with inline Template and Styles",
		"body": [
			"import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';",
			"",
			"import { Store, select } from '@ngrx/store';",
			"import { Observable } from 'rxjs';",
			"import * as fromFeature from '@app/${feature}/store';",
			"",
			"@Component({",
			"\tselector: '$app-${2:name}',",
			"\tchangeDetection: ChangeDetectionStrategy.OnPush,",
			"\ttemplate: ``,",
			"\tstyles: [``]",
			"})",
			"export class ${5:Name}Component implements OnInit {",
			"\tconstructor(private store: Store<fromFeature.State>) { }",
			"",
			"\tngOnInit() {${7: }}",
			"}${0}"
		]
	},
	"Angular Component Inline": {
		"prefix": "ng-component-inline",
		"description": "Component with inline Template and Styles",
		"body": [
			"import { Component, OnInit, Input, Output, ChangeDetectionStrategy } from '@angular/core';",
			"",
			"@Component({",
			"\tselector: '$app-${2:name}',",
			"\tchangeDetection: ChangeDetectionStrategy.OnPush,",
			"\ttemplate: ``,",
			"\tstyles: [``]",
			"})",
			"export class ${5:Name}Component implements OnInit {",
			"\tconstructor($6) { }",
			"",
			"\tngOnInit() {${7: }}",
			"}${0}"
		]
	},
	"Angular Service": {
		"prefix": "ng-service",
		"description": "Basic service",
		"body": [
			"import { Injectable } from '@angular/core';",
			"",
			"@Injectable()",
			"export class ${Name}Service {",
			"constructor(private http: HttpClient) {}",
			"$0}"
		]
	},
	"Angular ngRx Actions": {
		"prefix": "ngrx-actions-module",
		"description": "ngRx Actions module",
		"body": [
			"import { Action } from '@ngrx/store';",
			"",
			"export enum ${Class}ActionTypes {",
			"}",
			"",
			"export type ${Class}Action = ",
			""
		]
	},
	"Angular ngRx Actions Classes API Endpoint": {
		"prefix": "ngrx-actions-class-api",
		"description": "ngRx Actions classes API endpoint",
		"body": [
			"export class ${Verb1} implements Action {",
			"\treadonly type = ${Class}ActionTypes.${Verb1};",
			"}",
			"",
			"export class ${Verb1}Success implements Action {",
			"\treadonly type = ${Class}ActionTypes.${Verb1}Success;",
			"\tconstructor(public payload: ${payloadType}) { }",
			"}",
			"",
			"export class ${Verb1}Fail implements Action {",
			"\treadonly type = ${Class}ActionTypes.${Verb1}Fail;",
			"\tconstructor(public payload: Error) { }",
			"}",
		]
	},
	"Angular ngRx Actions Types API Endpoint": {
		"prefix": "ngrx-action-types-api",
		"description": "ngRx Actions typesAPI endpoint",
		"body": [
			"${Verb1} = '[${Feature}] ${Verb1}',",
			"${Verb1}Success = '[${Feature}] ${Verb1}Success',",
			"${Verb1}Fail = '[${Feature}] ${Verb1}Fail',",
		]
	},
	"Angular ngRx Reducer index": {
		"prefix": "ngrx-reducer-index",
		"description": "ngRx reducer index",
		"body": [
			"import { createFeatureSelector } from '@ngrx/store';",
			"",
			"import * as fromRoot from '@app/core/store/reducers/index';",
			"import * as from${Entity} from './${entity}.reducer';",
			"",
			"export interface ${Class}State {",
			"\t${entity}: from${Entity}.${Entity}State;",
			"}",
			"",
			"export interface State extends fromRoot.State {",
			"\t${class}: ${Class}State;",
			"}",
			"",
			"export const reducers = {",
			"\t${entity}: from${Entity}.reducer,",
			"};",
			"",
			"export const get${Class}State = createFeatureSelector<${Class}State>('${class}');",
		]
	},
	"Angular ngRx Reducer": {
		"prefix": "ngrx-reducer-entity",
		"description": "ngRx Reducer",
		"body": [
			"import { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';",
			"import {",
			"\t${Class}Action,",
			"\t${Class}ActionTypes,",
			"} from '../actions/${class}.actions';",
			"",
			"import { ${Model} } from '../../models';",
			"",
			"export interface ${Class}State extends EntityState<$Model> {",
			"\tloaded: boolean;",
			"\tloading: boolean;",
			"}",
			"",
			"export const adapter: EntityAdapter<${Model}> = createEntityAdapter<${Model}>({",
			"\tselectId: (item: ${Model}) => item.${id},",
			"\tsortComparer: false,",
			"});",
			"",
			"const initialState: ${Class}State = adapter.getInitialState({",
			"\tloaded: false,",
			"\tloading: false,",
			"});",
			"",
			"export function reducer(",
			"\tstate = initialState,",
			"\taction: ${Class}Action",
			"): ${Class}State {",
			"\tswitch (action.type) {",
			"\t\tcase ${Class}ActionTypes.${TYPE}:",
			"\t\t\treturn state;",
			"",
			"\t\tdefault: {",
			"\t\t\treturn state;",
			"\t\t}",
			"\t}",
			"}",
			"",
			"export const getloaded = (state: ${Class}State) => state.loaded;",
			"export const getloading = (state: ${Class}State) => state.loading;",
			"",
			"export const {",
			"\tselectIds,",
			"\tselectEntities,",
			"\tselectAll,",
			"\tselectTotal,",
			"} = adapter.getSelectors();",
		]
	},
	"Angular ngRx Effect Module": {
		"prefix": "ngrx-effects-module",
		"description": "ngRx Effects module",
		"body": [
			"import { Injectable } from '@angular/core';",
			"import { Observable, of } from 'rxjs';",
			"import { catchError, map, switchMap } from 'rxjs/operators';",
			"import { Action } from '@ngrx/store';",
			"import { Actions, Effect, ofType } from '@ngrx/effects';",
			"",
			"import * as from${Class}Actions from '../actions/${class}.actions';",
			"",
			"@Injectable()",
			"export class ${Class}Effects {",
			"",
			"\tconstructor(",
			"\t\tprivate ${actions}$: Actions",
			"\t) {}",
			"}"
		]
	},
	"Angular ngRx Effect": {
		"prefix": "ngrx-effect",
		"description": "ngRx effect",
		"body": [
			"@Effect()",
			"${name}\\$ = this.actions\\$.pipe(",
			"\tofType($1),",
			"\tmap((action: $2) => action.payload)",
			");"
		]
	},
	"Angular ngRx Selector module": {
		"prefix": "ngrx-selector-module",
		"description": "ngRx selector module",
		"body": [
			"import { createFeatureSelector, createSelector } from '@ngrx/store';",
			"",
			"import * as fromRoot from '@app/core/store';",
			"import * as fromFeature from '../reducers';",
			"import * as from${Class} from '../reducers/${class}.reducer';",
			"",
			"export const get${Class}State = createSelector(",
			"\tfromFeature.get${FeatureState},",
			"\t(state: fromFeature.${FeatureState}) => state.${class}",
			");",
			"",
			"export const get${Class}Loaded = createSelector(",
			"\tget${Class}State,",
			"\tfrom${Class}.getloaded",
			");",
			"",
			"export const get${Class}Loading = createSelector(",
			"\tget${Class}State,",
			"\tfrom${Class}.getloading",
			");",
			"",
			"export const get${Class}Ids = createSelector(",
			"\tget${Class}State,",
			"\tfrom${Class}.selectIds",
			");",
			"",
			"export const get${Class}Entities = createSelector(",
			"\tget${Class}State,",
			"\tfrom${Class}.selectEntities",
			");",
			"",
			"export const get${Class} = createSelector(",
			"\tget${Class}State,",
			"\tfrom${Class}.selectAll",
			");",
			"",
			"export const get${Class}Total = createSelector(",
			"get${Class}State,",
			"from${Class}.selectTotal",
			");",
			"",
		]
	},
}